
-------- Часть 1. Установка, запуск, настройка. -------------------------


1) Установить git -> https://git-scm.com/downloads с рекомендуемыми параметрами.

2) Выбрать папку(пустую обычно) для проекта.

3) Правой кнопокй по пустоте в этой папке, выбрать "Git Bash Here".


Далее в консоли:

4) git init (создает систему контроля версий в данной папке).

5) Добавить удаленный репозиторий "ForestNeuralNet"
git remote add origin https://github.com/AlekandrVakulenko/ForestNeuralNet.git

Ctrl+C НЕ РАБОТАЕТ В КОНСОЛИ, РАБОТАЕТ SHIFT+INSERT

в данном случае набор слов читается так:
кто? - программа git
род работы? - что-то про удаленные репозитории (remote)
че делать? создать ссылку на репозиторий (add)
как назвать? - "origin"
и где он в сети? - ссылка https://....



-------- Часть 2. Работа в консоли для получения ------------------------
----------------- файлов из удаленного репозитория. ---------------------

1) Получить актуальные файлы
git pull origin master

кто? - git (как обычно)
что делать? - обнови файлы по состоянию удаленного репозитория
какого? - "origin"
какая ветка там? - "master" (основная)


После первого выполнения этой команды папка наполнится файлами проекта.
Последующие "git pull ..." будут обновлять содержимое папки проекта
до состояния удаленного репозитория.


-------- Часть 3. Структура проекта -------------------------------------

- Большие файлы данных не содержатся в сети и загружаются вручную.
  Для того, чтобы git не интересовался ими - в текстовом файле .gitignore (точка перед именем и без расшерения txt на конце!)
  перечислены маски имен файлов, которые нужно игнорировать.

	*.xlsx - таблицы
	*.png - выходные картинки
	*.tif - большие картинки
	*.rar - архивы данных
	*.zip - архивы данных
	*.asv - бесполезные автосейвы матлаба


- Папку с созданнм проектом git можно переименовать или переместить, ему дела нет.

- Если git надоел, то просто удалите скрытую папку ".git"



-------- Часть 4. Добавление файлов -------------------------------------

В результате работы с проектом некоторые файлы изменились/удалены/созданы.

Чтобы зафиксировать этот результат выполняется следующая последовательность:

1) git add .
Команда add добавляет файлы в проект контроля версий, точкой(.) обозначено "все, что найдешь".
При необходимости можно добавлять не все файлы, а только необходимые, но обычно нужды в этом нет.

2) git commit -m 'some text about this commit'
   git commit -m "some text about this commit"

Именно команда "commit" создает "точку сохранения" проекта.
Параметр "-m" это сокращение от message и означает, что далее ожидается строка текста сообщения.
Символы " и ' равнозначны, НО ДОЛЖНЫ БЫТЬ ОДИНАКОВЫЕ, иначе программа зависнет.

После выполнения этой команды точка сохранения готова, но находится в локальном репозитории.



-------- Часть 5. Передача состояния в удаленный репозиторий. -----------

В случае коллективной работы с удаленным репозиторием необходимо отправить туда
список всех коммитов, которые были созданы за текущий период активности разработчика.

Отправлять разом можно сколько угодно коммитов, хоть раз в год.
Логично это делать каждый раз после конца несколько-часовой (дневной) рабочей активности
имеющей логическое завершение хотя бы по какому-то вопросу.

Выполняется командой:

git push origin master

где origin - удаленный репозиторий, куда отпраляются изменения.
master - в какую ветку удаленного репозитория отправить изменения.















